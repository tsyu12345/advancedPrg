学籍番号：	5419045
氏名：		高林秀

-------------------
問題番号：IR08-1

(1)
public class Main {
    public static void main(String[] args) throws InterruptedException {
        Counter c0 = new Counter(0);
        Thread thread0 = new Thread(c0);

        Counter c1 = new Counter(1);
        Thread thread1 = new Thread(c1);
        
        thread0.start();
        thread1.start();
        thread0.join();
        thread1.join();
        
        System.out.println("FINISH");
    }
}

(2)
public class Main {
    public static void main(String[] args) throws InterruptedException {
        Counter c0 = new Counter(0);
        Thread thread0 = new Thread(c0);

        Counter c1 = new Counter(1);
        Thread thread1 = new Thread(c1);
        
        thread0.start();
        thread0.join();
        thread1.start();
        thread1.join();

        System.out.println("FINISH");
    }
}










-------------------
問題番号：IR08-2

<予想>
30000
<コード>
・Main.java
public class Main {

    public static void main(String[] args) throws InterruptedException{
        Shared shared = new Shared();

        Thread[] threads = new Thread[3];
        for(int i = 0; i < threads.length; i++) {
            threads[i] = new Thread(new MyThread(shared));
            threads[i].start();
        }

        for(int i = 0; i < threads.length; i++) {
            try {
                threads[i].join();
            } catch(InterruptedException e) {
                e.printStackTrace();
            }
        }

        System.out.println(shared.getValue());
    }

}


・MyThread.java
public class MyThread implements Runnable {

    private Shared shared;

    public MyThread(Shared shared) {
        this.shared = shared;
    }

    public void run() {
        
        for(int i = 0; i < 10000; i++) {
            
            shared.incrementValue();
            
        }
        
    }

}



・Shared.java
public class Shared {

    private int value = 0;

    public int getValue() {
        return value;
    }

    public void incrementValue() {
        value++;
    }

}

＜結果＞
is-user@isvm:~/発展プログラミング/No8/shared_test_1$ java Main
22002
is-user@isvm:~/発展プログラミング/No8/shared_test_1$ java Main
30000
is-user@isvm:~/発展プログラミング/No8/shared_test_1$ java Main
25383

<推測>
マルチスレッドにおいて、各スレッド間でvalueの値は共有される。今回はスレッド間で変数の競合が発生し、正しくvalueの値がインクリメントされなかったと予想。













-------------------
問題番号：IR08-3

public class DepositThread implements Runnable {
    
    private final static int DEPOSIT_COUNT = 1000;
    private final static int DEPOSIT_AMOUNT= 1;
    //private Object lock = new Object();
    private Account account;
    
    public DepositThread(Account account) {
        this.account = account;
    }
    
    public void run() {
        for(int i = 0; i < DEPOSIT_COUNT; i++) {
            synchronized(account) {
                account.deposit(DEPOSIT_AMOUNT);
            }
        }
        
    }
}









-------------------
問題番号：









-------------------
問題番号：









-------------------
講義内容のまとめ：
「講義内容」の各項目について文章で説明を記載せよ。

各スレッドはstart()メソッドを呼び出した瞬間に動作し始める。したがって、各スレッド間でタイミングを合わせて何かをするといった処理はそのままでは実装できない。
あるスレッドの終了を待機するにはjoin()メソッドを呼び出した瞬間に動作し始める。したがって、各スレッド間でタイミングを合わせて何かをするといった処理はそのままでは実装できない。

排他処理は共有資源へのアクセス時など「スレッド間で共有される値」を計算する際に、スレッドの処理を制御するためのものである。
排他処理を用いると、各スレッドでただ１つのインスタンスを使用中に他のスレッドは処理を行わせないようにできるので、
スレッド間で数値の整合性を保つことができる。

Javaにおいては、排他処理を用いたい部分をsynchronized()関数で囲み、その第１引数にはその処理で利用するたった１つのインスタンスを指定する。








-------------------
