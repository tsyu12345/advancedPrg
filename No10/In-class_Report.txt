学籍番号：	5419045
氏名：		高林秀

-------------------
問題番号：IR10-1

・Main.java
public class Main {	
    private final static int TH_COUNT = 3;
    private final static String DOC_FILE = "short.txt";
    // private final static int TH_COUNT = 10;
    // private final static String DOC_FILE = "long.txt";

    public static void main(String[] args) throws InterruptedException {
        long startTimeMsec = System.currentTimeMillis();
        
        DocDownloader downloader = new DocDownloader(DOC_FILE);
        Thread dlThread = new Thread(downloader);
        dlThread.start();
        
        Result result = new Result();
        //WordCounter wc = new WordCounter(downloader, result);
        //Thread wcThread = new Thread(wc);
        //wcThread.start();

        Thread[] counterThreadArray = new Thread[TH_COUNT];
        for(int i = 0; i < counterThreadArray.length; i++) {
            WordCounter counter = new WordCounter(downloader, result);
            counterThreadArray[i] = new Thread(counter);
            counterThreadArray[i].start();

        }
        dlThread.join();
        for(int i = 0 ; i < counterThreadArray.length; i++) {
            counterThreadArray[i].join();
        }
        //wcThread.join();

        System.out.println("Main: " + result.getWordCount() + " words");

        long endTimeMsec = System.currentTimeMillis();
        System.out.println("Processing time: " + (endTimeMsec - startTimeMsec) + " msec");
    } 
}


・Result.java
public class Result {
    private final static long ADD_TIME_MSEC = 500;
    // private final static long ADD_TIME_MSEC = 5;

    private int wordCount;

    public Result() {
        wordCount = 0;
    }

    public void addWordCount(int count) throws InterruptedException {
        Thread.sleep(ADD_TIME_MSEC);
        synchronized(this) {
            wordCount += count;
        }
    }

    public int getWordCount() {
        return wordCount;
    }
}

・WordCounter.java
public class WordCounter implements Runnable {
    private final static long WAIT_TIME_MSEC = 500;
    private final static long ANALYSIS_TIME_MSEC = 500;
    // private final static long WAIT_TIME_MSEC = 5;
    // private final static long ANALYSIS_TIME_MSEC = 5;

    private DocDownloader downloader;
    private Result result;

    public WordCounter(DocDownloader downloader, Result result) {
        this.downloader = downloader;
        this.result = result;
    }
    
    private int countWord(String string) {
        String[] words = string.split("\\s+");
        int count = words.length;
        return count;
    }

    public void run() {
        while(!downloader.isFinished()) {
            String line = downloader.getLine();
            if(line == null) {
                try {
                    Thread.sleep(WAIT_TIME_MSEC);
                } catch(InterruptedException e) {
                    e.printStackTrace();
                }
            } else {
                try {
                    Thread.sleep(ANALYSIS_TIME_MSEC);
                    int count = countWord(line);
                    System.out.println("\tWordCounter: " + line + " -> " + count);
                    result.addWordCount(count);
                } catch(InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }

        System.out.println("\tWordCounter: FINISHED");
    }
}








-------------------
問題番号：IR10-2









-------------------
問題番号：









-------------------
問題番号：









-------------------
問題番号：









-------------------
講義内容のまとめ：
「講義内容」の各項目について文章で説明を記載せよ。

分析処理部分のクラスである、WordCounterのインスタンスを、
Threadクラスのコンストラクタ引数に渡し、Threadクラスの配列の要素として、格納する。
その後、Threadクラスの配列の各要素に対し、start()メソッド、Join()メソッドを実行することで、
複数の行のテキスト分析処理を並行して行うことができる。
ただし、各スレッドは同一の変数、インスタンスにアクセスしているので、そのまま並行処理を実装しただけでは得られる結果に不整合が生じる。
したがって、単語数をカウントする部分、テキストをダウンロードする処理部分に対し、synchronized()関数を用いて整合性を保つ必要がある。


-------------------
