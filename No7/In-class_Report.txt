学籍番号：	5419045
氏名：		高林秀

-------------------
問題番号：IR07-1
public class Main {
    
    private final static long SLEEP_LEN_MSEC = 1000;

    
    public static void main(String[] args) throws InterruptedException {
        
        for(int i = 0; i < 10; i++) {
            //System.out.println("Main: " + i);
            MyThread1 thread = new MyThread1();
            thread.start();
            Thread.sleep(SLEEP_LEN_MSEC);
        }
    }

}

public class MyThread1 extends Thread {
    
    private final static long SLEEP_LEN_MSEC = 1000;
    
    
    public void run() {
        for(int i = 0; i < 10; i++) {
            //System.out.print("MyThread1 # " + i + ":");
            System.out.print("MyThread1 # " + i + ":");
            try {
                System.out.println(i);
                Thread.sleep(SLEEP_LEN_MSEC);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}








-------------------
問題番号：IR07-2
public class Main {
    
    private final static long SLEEP_LEN_MSEC = 1000;

    
    public static void main(String[] args) throws InterruptedException {
        //MyThread3 mt = new MyThread3();
        
        
        for(int i = 0; i < 10; i++) {
            //System.out.println("Main: " + i);
            MyThread3 mt = new MyThread3(i);
            Thread thread = new Thread(mt);
            thread.start();
            Thread.sleep(SLEEP_LEN_MSEC);
        }
    }
}

public class MyThread3 implements Runnable {
    
    private final static long SLEEP_LEN_MSEC = 1000;
    private int id;
    public MyThread3(int thredId) {
        this.id = thredId;
    }
    
    public void run() {
        for(int i = 0; i < 10; i++) {
            System.out.println("MyThread3 #" + id + ":" + i);
            try {
                Thread.sleep(SLEEP_LEN_MSEC);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
    
}









-------------------
問題番号：IR07-3

import java.util.Scanner;

public class Echo {
    
    private final static long SLEEP_LEN_MSEC = 100;

    private Scanner scanner;
    private int n;
    
    public Echo() {
        scanner = new Scanner(System.in);
        System.out.print("n > ");
        n = scanner.nextInt();
    }
    
    
    private void echo() throws InterruptedException {
        SubThread userInput = new SubThread();
        Thread thread = new Thread(userInput);
        thread.start();
        while(n != 0) {
            System.out.print(n);
            if(userInput.m != -1) {
                n = userInput.m;
            }
            Thread.sleep(SLEEP_LEN_MSEC);
        }
    }


    
    public static void main(String[] args) throws InterruptedException {
        Echo ste = new Echo();
        ste.echo();
    }

}

class SubThread implements Runnable {
    private Scanner scanner;
    public int m = -1;

    public void run() {
        while(true) {
            scanner = new Scanner(System.in);
            m = scanner.nextInt();
            if(m == 0) {
                break;
            }
        }        
    }
}








-------------------
問題番号：









-------------------
問題番号：









-------------------
講義内容のまとめ：
「講義内容」の各項目について文章で説明を記載せよ。

Javaにおけるマルチスレッドの実装方法には２つある。
１つは、Thredクラスを継承する方法である。しかし、Javaでは多重継承ができないので、Threadクラスを継承したクラスは、他のクラスを継承したくてもできなくなってしまい、親クラスの
Threadクラスに束縛されることになる。そこで、２つ目の手法であるRunnableインタフェースの実装による方法がある。
インタフェースの実装は、クラスの継承ではないので、マルチスレッドを行うクラスにおいては、Threadクラスの継承に縛られることはない。

呼び出すときは、Runnableインタフェースをimplementsしたクラスのrunメソッドを呼び出すことになる。そのさい、直接runメソッドを呼び出すのではなく、
Threadクラスのstartメソッドを利用する。具体的には、ThreadクラスのインスタンスのコンストラクタにRunnableインタフェースをimplementsしたクラスのインスタンスを渡す。
次に、そのThreadクラスのstartメソッドを呼び出すことで、マルチスレッドを実装できる。









-------------------
